version: "3.9"

services:
  # =============================================================================
  # DATABASE SERVICE
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: ${PROJECT_SLUG}_postgres
    platform: linux/arm64
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-strapi}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-strapi}
      POSTGRES_DB: ${POSTGRES_DB:-strapidb}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      TZ: ${TIMEZONE:-UTC}
    ports:
      - "${POSTGRES_PORT_EXTERNAL:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./docker/backup:/backup
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-strapi} -d ${POSTGRES_DB:-strapidb}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # BACKEND SERVICE (STRAPI)
  # =============================================================================
  backend:
    container_name: ${PROJECT_SLUG}_backend
    restart: unless-stopped
    build:
      context: .
      dockerfile: docker/backend/development/Dockerfile
      target: development
    platform: linux/arm64
    ports:
      - "${STRAPI_PORT_EXTERNAL:-1337}:1337"
    volumes:
      - ./apps/api:/app
      - backend_node_modules:/app/node_modules
      - strapi_uploads:/app/public/uploads
    environment:
      # Database Configuration
      DATABASE_CLIENT: ${DATABASE_CLIENT:-postgres}
      DATABASE_NAME: ${DATABASE_NAME:-strapidb}
      DATABASE_HOST: ${DATABASE_HOST:-postgres}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_USERNAME: ${DATABASE_USERNAME:-strapi}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-strapi}
      DATABASE_SSL: ${DATABASE_SSL:-false}
      
      # Strapi Configuration
      NODE_ENV: ${NODE_ENV:-development}
      STRAPI_HOST: ${STRAPI_HOST:-0.0.0.0}
      STRAPI_PORT: ${STRAPI_PORT:-1337}
      STRAPI_URL: ${STRAPI_URL:-http://localhost:1337}
      
      # Strapi Security
      STRAPI_ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      STRAPI_JWT_SECRET: ${ENCRYPTION_KEY}
      STRAPI_API_TOKEN_SALT: ${API_TOKEN_SALT}
      STRAPI_APP_KEYS: ${APP_KEYS}
      STRAPI_TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
      STRAPI_CORS_ORIGIN: ${STRAPI_CORS_ORIGIN:-http://localhost:3000,http://localhost:1337}
      
      # Timezone
      TZ: ${TIMEZONE:-UTC}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1337/_health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # FRONTEND SERVICE (NEXTJS)
  # =============================================================================
  frontend:
    container_name: ${PROJECT_SLUG}_frontend
    restart: unless-stopped
    build:
      context: .
      dockerfile: docker/frontend/development/Dockerfile
      target: development
    platform: linux/arm64
    ports:
      - "${NEXTJS_PORT_EXTERNAL:-3000}:3000"
    volumes:
      - ./apps/web:/app
      - frontend_node_modules:/app/node_modules
      - frontend_next:/app/.next
    environment:
      # Next.js Configuration
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_FRONTEND_URL: ${NEXT_PUBLIC_FRONTEND_URL:-http://localhost:3000}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:1337}
      NEXT_PUBLIC_STRAPI_URL: ${NEXT_PUBLIC_STRAPI_URL:-http://localhost:1337}
      
      # Analytics
      NEXT_PUBLIC_GOOGLE_ANALYTICS: ${NEXT_PUBLIC_GOOGLE_ANALYTICS:-}
      NEXT_PUBLIC_GOOGLE_TAG_MANAGER: ${NEXT_PUBLIC_GOOGLE_TAG_MANAGER:-}
      
      # Timezone
      TZ: ${TIMEZONE:-UTC}
    depends_on:
      - backend
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # REVERSE PROXY (NGINX)
  # =============================================================================
  nginx:
    container_name: ${PROJECT_SLUG}_nginx
    restart: unless-stopped
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    ports:
      - "${NGINX_PORT_EXTERNAL:-80}:80"
      - "${NGINX_SSL_PORT_EXTERNAL:-443}:443"
    volumes:
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # MONITORING SERVICES (OPTIONAL)
  # =============================================================================
  prometheus:
    container_name: ${PROJECT_SLUG}_prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app-network
    profiles:
      - monitoring

  grafana:
    container_name: ${PROJECT_SLUG}_grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    networks:
      - app-network
    profiles:
      - monitoring

  # =============================================================================
  # BACKUP SERVICE
  # =============================================================================
  backup:
    container_name: ${PROJECT_SLUG}_backup
    image: postgres:15-alpine
    restart: "no"
    volumes:
      - ./docker/backup:/backup
      - pgdata:/var/lib/postgresql/data:ro
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-strapi}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-strapi}
      POSTGRES_DB: ${POSTGRES_DB:-strapidb}
    command: >
      sh -c "
        set -e
        echo 'Starting backup...'
        pg_dump -h postgres -U $${POSTGRES_USER} -d $${POSTGRES_DB} \
          --no-password --verbose \
          -f /backup/backup_$$(date +%Y%m%d_%H%M%S).sql
        echo 'Backup completed'
        find /backup -name 'backup_*.sql' -mtime +${BACKUP_RETENTION_DAYS:-7} -delete
        echo 'Old backups cleaned'
      "
    networks:
      - app-network
    profiles:
      - backup

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  pgdata:
    driver: local
  strapi_uploads:
    driver: local
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local
  frontend_next:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
